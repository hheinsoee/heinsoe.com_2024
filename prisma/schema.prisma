generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model content {
  id                 Int                  @id @default(autoincrement())
  title              String               @db.VarChar(200)
  description        String?              @db.Text
  body               String?              @db.Text
  contentTypeId      Int?
  createTime         DateTime?            @default(now()) @db.DateTime(0)
  contentType        contentType?         @relation(fields: [contentTypeId], references: [id], onUpdate: NoAction, map: "Content_ibfk_1")
  field              field[]
  mapContentTaxonomy mapContentTaxonomy[]

  @@index([contentTypeId], map: "type_id")
}

model contentType {
  id                         Int                          @id @default(autoincrement())
  name                       String                       @db.VarChar(200)
  description                String?                      @db.Text
  createTime                 DateTime?                    @default(now()) @db.DateTime(0)
  content                    content[]
  fieldType                  fieldType[]
  mapContentTypeTaxonomyType mapContentTypeTaxonomyType[]
}

model field {
  id         Int       @id @default(autoincrement())
  createTime DateTime? @default(now()) @db.DateTime(0)
  name       String?   @db.VarChar(255)
  value      String?   @db.Text
  contentId  Int?
  content    content?  @relation(fields: [contentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Field_ibfk_1")

  @@index([contentId], map: "contentId")
}

model fieldType {
  id            Int          @id @default(autoincrement())
  name          String       @db.VarChar(200)
  contentTypeId Int?
  dataType     String?      @db.VarChar(20)
  createTime    DateTime?    @default(now()) @db.DateTime(0)
  contentType   contentType? @relation(fields: [contentTypeId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FieldType_ibfk_1")

  @@index([contentTypeId], map: "type_id")
}

model mapContentTaxonomy {
  id          Int       @id @default(autoincrement())
  contentId   Int
  taxonomyId Int
  createTime  DateTime? @default(now()) @db.DateTime(0)
  content     content   @relation(fields: [contentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "map_Content_Taxonomy_ibfk_1")
  taxonomy    taxonomy  @relation(fields: [taxonomyId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "map_Content_Taxonomy_ibfk_2")

  @@index([contentId], map: "contentId")
  @@index([taxonomyId], map: "taxonomy_id")
}

model mapContentTypeTaxonomyType {
  id             Int          @id @default(autoincrement())
  taxonomyTypeId Int
  contentTypeId  Int
  createTime     DateTime?    @default(now()) @db.DateTime(0)
  taxonomyType   taxonomyType @relation(fields: [taxonomyTypeId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "map_ContentType_TaxonomyType_ibfk_1")
  contentType    contentType  @relation(fields: [contentTypeId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "map_ContentType_TaxonomyType_ibfk_2")

  @@index([taxonomyTypeId], map: "taxonomy_id")
  @@index([contentTypeId], map: "type_id")
}

model taxonomy {
  id                 Int                  @id @default(autoincrement())
  taxonomyTypeId     Int?
  name               String               @db.VarChar(200)
  createTime         DateTime?            @default(now()) @db.DateTime(0)
  mapContentTaxonomy mapContentTaxonomy[]
  taxonomyType       taxonomyType?        @relation(fields: [taxonomyTypeId], references: [id], onUpdate: NoAction, map: "Taxonomy_ibfk_1")

  @@index([taxonomyTypeId], map: "taxonomy_id")
}

model taxonomyType {
  id                         Int                          @id @default(autoincrement())
  name                       String                       @db.VarChar(200)
  description                String?                      @db.Text
  createTime                 DateTime?                    @default(now()) @db.DateTime(0)
  mapContentTypeTaxonomyType mapContentTypeTaxonomyType[]
  taxonomy                   taxonomy[]
}
